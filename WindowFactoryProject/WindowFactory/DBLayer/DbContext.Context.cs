//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowFactory.DBLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WindowFactoryEntities : DbContext
    {
        public WindowFactoryEntities()
            : base("name=WindowFactoryEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Color> Colors { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<MaterialList> MaterialLists { get; set; }
        public virtual DbSet<MaterialType> MaterialTypes { get; set; }
        public virtual DbSet<Offer> Offers { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<SalaryList> SalaryLists { get; set; }
        public virtual DbSet<Storage> Storages { get; set; }
        public virtual DbSet<SupplyItem> SupplyItems { get; set; }
        public virtual DbSet<SupplyOrder> SupplyOrders { get; set; }
        public virtual DbSet<Worker> Workers { get; set; }
        public virtual DbSet<WorkerType> WorkerTypes { get; set; }
        public virtual DbSet<vMaterial> vMaterials { get; set; }
        public virtual DbSet<vSupplyItem> vSupplyItems { get; set; }
        public virtual DbSet<vWorker> vWorkers { get; set; }
    
        [DbFunction("WindowFactoryEntities", "GetFreeEngineer")]
        public virtual IQueryable<GetFreeEngineer_Result> GetFreeEngineer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetFreeEngineer_Result>("[WindowFactoryEntities].[GetFreeEngineer]()");
        }
    
        [DbFunction("WindowFactoryEntities", "GetMaterial")]
        public virtual IQueryable<GetMaterial_Result> GetMaterial(Nullable<int> materialNeed)
        {
            var materialNeedParameter = materialNeed.HasValue ?
                new ObjectParameter("MaterialNeed", materialNeed) :
                new ObjectParameter("MaterialNeed", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMaterial_Result>("[WindowFactoryEntities].[GetMaterial](@MaterialNeed)", materialNeedParameter);
        }
    
        public virtual int AddMaterial(Nullable<int> typeId, string name, Nullable<decimal> price, Nullable<int> quantity, Nullable<int> countryId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMaterial", typeIdParameter, nameParameter, priceParameter, quantityParameter, countryIdParameter);
        }
    
        public virtual int AddOrder(string customerId, Nullable<int> managerId)
        {
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            var managerIdParameter = managerId.HasValue ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrder", customerIdParameter, managerIdParameter);
        }
    
        public virtual int AddPerson(string personName, string personSurName, string personPhoneNumber, string personEmail)
        {
            var personNameParameter = personName != null ?
                new ObjectParameter("PersonName", personName) :
                new ObjectParameter("PersonName", typeof(string));
    
            var personSurNameParameter = personSurName != null ?
                new ObjectParameter("PersonSurName", personSurName) :
                new ObjectParameter("PersonSurName", typeof(string));
    
            var personPhoneNumberParameter = personPhoneNumber != null ?
                new ObjectParameter("PersonPhoneNumber", personPhoneNumber) :
                new ObjectParameter("PersonPhoneNumber", typeof(string));
    
            var personEmailParameter = personEmail != null ?
                new ObjectParameter("PersonEmail", personEmail) :
                new ObjectParameter("PersonEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPerson", personNameParameter, personSurNameParameter, personPhoneNumberParameter, personEmailParameter);
        }
    
        public virtual int AddProduct(Nullable<int> orderNumber, Nullable<int> engeneerId, Nullable<int> colorId, Nullable<int> height, Nullable<int> width, Nullable<int> profileId, Nullable<int> glassId, Nullable<int> furnitureId)
        {
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            var engeneerIdParameter = engeneerId.HasValue ?
                new ObjectParameter("EngeneerId", engeneerId) :
                new ObjectParameter("EngeneerId", typeof(int));
    
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(int));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            var glassIdParameter = glassId.HasValue ?
                new ObjectParameter("GlassId", glassId) :
                new ObjectParameter("GlassId", typeof(int));
    
            var furnitureIdParameter = furnitureId.HasValue ?
                new ObjectParameter("FurnitureId", furnitureId) :
                new ObjectParameter("FurnitureId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProduct", orderNumberParameter, engeneerIdParameter, colorIdParameter, heightParameter, widthParameter, profileIdParameter, glassIdParameter, furnitureIdParameter);
        }
    
        public virtual int AddSalary(Nullable<int> workerId, Nullable<System.DateTime> date, Nullable<decimal> salary)
        {
            var workerIdParameter = workerId.HasValue ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSalary", workerIdParameter, dateParameter, salaryParameter);
        }
    
        public virtual int AddToSupplyItem(Nullable<int> materialId, Nullable<int> quantityNeed)
        {
            var materialIdParameter = materialId.HasValue ?
                new ObjectParameter("MaterialId", materialId) :
                new ObjectParameter("MaterialId", typeof(int));
    
            var quantityNeedParameter = quantityNeed.HasValue ?
                new ObjectParameter("QuantityNeed", quantityNeed) :
                new ObjectParameter("QuantityNeed", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddToSupplyItem", materialIdParameter, quantityNeedParameter);
        }
    
        public virtual int AddWorker(string personName, string personSurName, string personPhoneNumber, string personEmail, string workerType, string passWord)
        {
            var personNameParameter = personName != null ?
                new ObjectParameter("PersonName", personName) :
                new ObjectParameter("PersonName", typeof(string));
    
            var personSurNameParameter = personSurName != null ?
                new ObjectParameter("PersonSurName", personSurName) :
                new ObjectParameter("PersonSurName", typeof(string));
    
            var personPhoneNumberParameter = personPhoneNumber != null ?
                new ObjectParameter("PersonPhoneNumber", personPhoneNumber) :
                new ObjectParameter("PersonPhoneNumber", typeof(string));
    
            var personEmailParameter = personEmail != null ?
                new ObjectParameter("PersonEmail", personEmail) :
                new ObjectParameter("PersonEmail", typeof(string));
    
            var workerTypeParameter = workerType != null ?
                new ObjectParameter("WorkerType", workerType) :
                new ObjectParameter("WorkerType", typeof(string));
    
            var passWordParameter = passWord != null ?
                new ObjectParameter("PassWord", passWord) :
                new ObjectParameter("PassWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddWorker", personNameParameter, personSurNameParameter, personPhoneNumberParameter, personEmailParameter, workerTypeParameter, passWordParameter);
        }
    
        public virtual int CalculateOrderPrice(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculateOrderPrice", orderIdParameter);
        }
    
        public virtual int CalculateProductPrice(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculateProductPrice", productIdParameter);
        }
    
        public virtual int CreateSupplyOrder(Nullable<int> managerId)
        {
            var managerIdParameter = managerId.HasValue ?
                new ObjectParameter("ManagerId", managerId) :
                new ObjectParameter("ManagerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateSupplyOrder", managerIdParameter);
        }
    
        public virtual int Pay(Nullable<int> personId, Nullable<int> orderId, Nullable<decimal> paid)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var paidParameter = paid.HasValue ?
                new ObjectParameter("Paid", paid) :
                new ObjectParameter("Paid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pay", personIdParameter, orderIdParameter, paidParameter);
        }
    
        public virtual int SetMaterialList(Nullable<int> productId, Nullable<int> materialId, Nullable<int> quantity)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var materialIdParameter = materialId.HasValue ?
                new ObjectParameter("MaterialId", materialId) :
                new ObjectParameter("MaterialId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetMaterialList", productIdParameter, materialIdParameter, quantityParameter);
        }
    }
}
